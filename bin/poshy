#!/usr/bin/env python3
try:
    import aya
except ImportError:
    pass
VERSION = 1.8
import os, getpass, socket, subprocess, shlex, argparse, readline

CS = ""
un = getpass.getuser()
hn = socket.gethostname()
if ".local" in hn:
    hn = hn[:-6]
id = '$'
if os.getuid() == 0:
    id = '#'
pwd = os.getcwd()

def run(app):
    home = os.getenv("HOME")
    with open(f"{home}/.psh_history", 'w') as file:
        file.write(f"{app}\n")
    if "cd" in app[0:2]:
        try:
            dir = app[3:]
            if dir == '':
                os.chdir(os.getenv("HOME"))
            os.chdir(dir)
        except:
            print(f"Directory '{dir}' has not been found.")
    if app in ['exit', 'exit()']:
        exit()
    env = os.environ.copy()
    env["SHELL"] = __file__
    def export(var, value):
        env[var] = value
    try:
        exec(app)
    except:
        try:
            app = shlex.split(app)
            proc = subprocess.Popen(app, env=env, stdout=subprocess.PIPE, encoding="UTF-8")
            return proc.communicate()[0].strip()
        except Exception as e:
            return e

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--version", action="version", version=f"v{VERSION}", help="Shows the current version")
parser.parse_args()

while True:
    try:
        pwd = os.getcwd()
        if os.getenv("HOME") in pwd:
            al = os.getenv("HOME")
            va = len(al)
            pwd = pwd[va:]
            pwd = f"~{pwd}"
        PS1 = f"[{un}@{hn}] {pwd} {id} "
        if CS in globals():
            PS1 = CS
        values = os.listdir()
        def complete(text, state):
            matches = [v for v in values if v.startswith(text)]
            if len(matches) == 1 and matches[0] == text:
                # Add space if the current text is the same as the only match
                return "{} ".format(matches[0]) if state == 0 else None
            if state >= len(matches):
                return None
            return matches[state]
        readline.set_completer(complete)
        for line in ("tab: complete", "set show-all-if-unmodified on"):
            readline.parse_and_bind(line)
        app = input(PS1)
        print(run(app))
    except KeyboardInterrupt:
        print("\n")
        continue